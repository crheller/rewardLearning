"""
Generate list of target frequency / loudness combos for behavioral training.
"""

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import make_axes_locatable
from itertools import combinations
import pandas as pd

path = '/home/charlie/Desktop/lbhb/code/projects/rewardLearning/behavioral_analysis/'

# generate list of targets that span the freq range we use for bandpass noise
# (500 Hz - 16000 Hz, 15 steps, logspace)
# these actually go from 561 Hz to 14254 because the noise bandwidth is 1 octave 
# (i.e. these are limits generated by baphy)

low = 561
high = 14254
ncount = 15
cfs = [int(round(x)) for x in np.logspace(np.log2(low), np.log2(high), ncount, base=2)]

# generate list of all stimulus combos with > 2 octave separation
combos = list(combinations(cfs, 2))
octave_sep_mask = [True if (abs(np.log2(c[0]/c[1])) >= 1.5) & (abs(np.log2(c[0]/c[1])) <= 3) else False for c in combos]
combos = np.array(combos)[octave_sep_mask]

low_freq_rew = combos
reversals = combos[:, ::-1]

combos = np.concatenate((low_freq_rew, reversals), axis=0)

# set numpy random seed
np.random.seed(123)

# generate a random sample of rew/nr target combos from this space. 
nsessions = 50
idx = np.random.choice(range(0, combos.shape[0]), nsessions, replace=True)
tar_combos = combos[idx, :]

# plot to see how well this random sample tiles the freq. space
h, x, y = np.histogram2d(x=tar_combos[:, 0], y=tar_combos[:, 1], bins=cfs)

f, ax = plt.subplots(1, 1, figsize=(5, 5))

im = ax.imshow(h, origin='lower', cmap='Reds')
ax.set_xticks(range(0, len(cfs)))
ax.set_xticklabels(cfs, rotation=45, fontsize=8)
ax.set_xlabel('Rewarded Target')
ax.set_yticks(range(0, len(cfs)))
ax.set_yticklabels(cfs, rotation=45, fontsize=8)
ax.set_ylabel('Not-Rewarded Target')

ax.set_title('Session counts for each freq pair')

divider = make_axes_locatable(ax)
cax = divider.append_axes("right", size="5%", pad=0.05)

f.colorbar(im, cax=cax)


f.tight_layout()

plt.show()

# export list of training combinations
tar_combos = pd.DataFrame(index=range(0, nsessions), columns=['rewarded', 'not-rewarded'], data=tar_combos)

tar_combos.to_csv(path+'target_training_combinations.csv')
